/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kroky.jminesweeper;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;
import javafx.util.Pair;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author Krokavec Peter
 */
public class MinefieldPanel extends javax.swing.JPanel {

    private static final Logger LOG = LogManager.getLogger();

    MinefieldPanel(int xSize, int ySize, int mineCount) {
        initComponents();
        initMinefield(xSize, ySize, mineCount);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        setLayout(new GridBagLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private static final GameState GAME_STATE = GameState.getInstance();

    private void initMinefield(int xSize, int ySize, int mineCount) {
        Tile[][] tiles = initTiles(xSize, ySize);
        placeMinesToTiles(tiles, mineCount);
        placeTilesToPanel(tiles);
        GameState.getInstance().init(tiles);
    }

    private Tile[][] initTiles(int xSize, int ySize) {
        Tile[][] tiles = new Tile[xSize][ySize];
        for (int x = 0; x < xSize; x++) {
            for (int y = 0; y < ySize; y++) {
                tiles[x][y] = new Tile(x, y);
            }
        }
        initNeighbours(tiles);
        return tiles;
    }

    private void initNeighbours(Tile[][] tiles) {
        for (int x = 0; x < tiles.length; x++) {
            for (int y = 0; y < tiles[0].length; y++) {
                //top neighbours
                tiles[x][y].addNeighbour(getTile(tiles, x - 1, y - 1));
                tiles[x][y].addNeighbour(getTile(tiles, x, y - 1));
                tiles[x][y].addNeighbour(getTile(tiles, x + 1, y - 1));
                //left and right neighbours
                tiles[x][y].addNeighbour(getTile(tiles, x - 1, y));
                tiles[x][y].addNeighbour(getTile(tiles, x + 1, y));
                //bottom neighbours
                tiles[x][y].addNeighbour(getTile(tiles, x - 1, y + 1));
                tiles[x][y].addNeighbour(getTile(tiles, x, y + 1));
                tiles[x][y].addNeighbour(getTile(tiles, x + 1, y + 1));
            }
        }
    }

    private Tile getTile(Tile[][] tiles, int x, int y) {
        try {
            return tiles[x][y];
        } catch (IndexOutOfBoundsException e) {
            return null; //if index out of bounds occurs, there's no neighbour at these coordinates
        }
    }

    private void placeMinesToTiles(Tile[][] tiles, int mineCount) {
        final int xSize = tiles.length;
        final int ySize = tiles[0].length;
        Random rand = new Random();
        Set<Pair<Integer, Integer>> randomCoords = new HashSet<>();
        while (randomCoords.size() < mineCount) {
            int x = rand.nextInt(xSize);
            int y = rand.nextInt(ySize);
            Pair<Integer, Integer> coords = new Pair<>(x, y);
            randomCoords.add(coords);
        }
        randomCoords.stream().forEach(coord -> tiles[coord.getKey()][coord.getValue()].setTrapped(true));
    }

    private void placeTilesToPanel(Tile[][] tiles) {
        GridBagConstraints gridBagConstraints;

        this.setLayout(new GridBagLayout());
        final int xMax = tiles.length;
        final int yMax = tiles[0].length;
        for (int x = 0; x < xMax; x++) {
            for (int y = 0; y < yMax; y++) {
                gridBagConstraints = new GridBagConstraints();
                gridBagConstraints.gridx = x;
                gridBagConstraints.gridy = y;
//                if (x > 0 && y > 0) {
//                    gridBagConstraints.insets = new Insets(-1, -1, 0, 0);
//                } else if (x == 0 && y > 0) {
//                    gridBagConstraints.insets = new Insets(-1, 0, 0, 0);
//                } else if (x > 0 && y == 0) {
//                    gridBagConstraints.insets = new Insets(0, -1, 0, 0);
//                } else if (x == 0 && y == 0) {
//                    gridBagConstraints.insets = new Insets(0, 0, 0, 0);
//                }
                this.add(tiles[x][y], gridBagConstraints);
            }
        }
    }

}
