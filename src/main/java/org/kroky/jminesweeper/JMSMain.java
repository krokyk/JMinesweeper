/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kroky.jminesweeper;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.kroky.commons.utils.SwingUtils;
import org.kroky.jminesweeper.events.GameStateChangedEvent;
import org.kroky.jminesweeper.events.GameStateChangedListener;
import org.kroky.jminesweeper.utils.StopWatch;
import org.kroky.jminesweeper.utils.StopWatchListener;

/**
 *
 * @author Krokavec Peter
 */
public class JMSMain extends javax.swing.JFrame {

    private static final Logger LOG = LogManager.getFormatterLogger();

    /**
     * Creates new form MainFrame
     */
    public JMSMain() {
        initComponents();
        additionalInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new JScrollPane();
        minefieldContainer = new JPanel();
        jPanel1 = new JPanel();
        jPanel3 = new JPanel();
        generateButton = new JButton();
        jPanel4 = new JPanel();
        jLabel2 = new JLabel();
        jLabel1 = new JLabel();
        timeCounter = new JButton();
        flagCounter = new JButton();
        jPanel5 = new JPanel();
        jLabel8 = new JLabel();
        yLabel = new JLabel();
        jLabel12 = new JLabel();
        xLabel = new JLabel();
        popLabel = new JLabel();
        ySlider = new JSlider();
        xSlider = new JSlider();
        jPanel2 = new JPanel();
        lockCheckbox = new JCheckBox();
        jLabel9 = new JLabel();
        popSlider = new JSlider();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("JMinesweeper");

        jScrollPane2.setMaximumSize(new Dimension(640, 640));
        jScrollPane2.setMinimumSize(new Dimension(640, 640));
        jScrollPane2.setPreferredSize(new Dimension(640, 640));

        minefieldContainer.setLayout(new BoxLayout(minefieldContainer, BoxLayout.LINE_AXIS));
        jScrollPane2.setViewportView(minefieldContainer);

        jPanel3.setLayout(new BoxLayout(jPanel3, BoxLayout.LINE_AXIS));

        generateButton.setMaximumSize(new Dimension(82, 82));
        generateButton.setMinimumSize(new Dimension(82, 82));
        generateButton.setPreferredSize(new Dimension(82, 82));
        generateButton.setIcon(SwingUtils.getIcon("/icons/smiley_start.png", new Dimension(60, 60)));
        generateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        jPanel3.add(generateButton);

        jLabel2.setText("Flags left:");

        jLabel1.setText("Elapsed time:");

        timeCounter.setBackground(new Color(0, 0, 0));
        timeCounter.setForeground(new Color(255, 0, 0));
        timeCounter.setFocusPainted(false);
        timeCounter.setLabel("00:00");
        timeCounter.setOpaque(false);

        flagCounter.setBackground(new Color(0, 0, 0));
        flagCounter.setForeground(new Color(255, 0, 0));
        flagCounter.setText("0000");
        flagCounter.setFocusPainted(false);
        flagCounter.setOpaque(false);

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(162, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, GroupLayout.Alignment.TRAILING))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addComponent(timeCounter)
                    .addComponent(flagCounter)))
        );
        jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(timeCounter)
                    .addComponent(jLabel1))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(flagCounter)
                    .addComponent(jLabel2)))
        );

        jLabel8.setText("X:");

        yLabel.setText("20");

        jLabel12.setText("Mine population:");

        xLabel.setText("20");

        popLabel.setText("20%");

        ySlider.setMinimum(10);
        ySlider.setValue(20);
        ySlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                ySliderStateChanged(evt);
            }
        });

        xSlider.setMinimum(10);
        xSlider.setToolTipText("");
        xSlider.setValue(20);
        xSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                xSliderStateChanged(evt);
            }
        });

        jPanel2.setLayout(new BoxLayout(jPanel2, BoxLayout.LINE_AXIS));

        lockCheckbox.setSelected(true);
        lockCheckbox.setText("Lock");
        jPanel2.add(lockCheckbox);

        jLabel9.setText("Y:");

        popSlider.setMaximum(99);
        popSlider.setMinimum(1);
        popSlider.setValue(10);
        popSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                popSliderStateChanged(evt);
            }
        });

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xLabel, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(popSlider, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ySlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(yLabel, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                            .addComponent(popLabel))))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                            .addComponent(xSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(xLabel))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel9)
                            .addComponent(ySlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(yLabel)))
                    .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 58, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel12)
                    .addComponent(popSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(popLabel)))
        );

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        );

        jPanel1Layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {jPanel4, jPanel5});

        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        Component[] children = minefieldContainer.getComponents();
        generateButton.setIcon(SwingUtils.getIcon("/icons/smiley_start.png", new Dimension(60, 60)));
        LOG.info(jScrollPane2.getSize());
        if (children != null) {
            minefieldContainer.removeAll();
            minefieldContainer.repaint();
        }
        MinefieldPanel minefieldPanel = new MinefieldPanel(getSizeX(), getSizeY(), getMineCount());
        minefieldContainer.add(Box.createHorizontalGlue());
        minefieldContainer.add(minefieldPanel);
        minefieldContainer.add(Box.createHorizontalGlue());
        stopWatch.restart();
        pack();
    }//GEN-LAST:event_generateButtonActionPerformed

    private void popSliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_popSliderStateChanged
        final int percent = getPercent();
        String value = String.valueOf(percent) + "%";
        setLabelValue(popLabel, value);
        setFlagCounterText(getMineCount());
    }//GEN-LAST:event_popSliderStateChanged

    private void ySliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_ySliderStateChanged
        String value = String.valueOf(getSizeY());
        setLabelValue(yLabel, value);
        if (lockCheckbox.isSelected()) {
            xSlider.setValue(getSizeY());
            setLabelValue(xLabel, value);
        }
        setFlagCounterText(getMineCount());
    }//GEN-LAST:event_ySliderStateChanged

    private void xSliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_xSliderStateChanged
        String value = String.valueOf(getSizeX());
        setLabelValue(xLabel, value);
        if (lockCheckbox.isSelected()) {
            ySlider.setValue(getSizeX());
            setLabelValue(yLabel, value);
        }
        setFlagCounterText(getMineCount());
    }//GEN-LAST:event_xSliderStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException e) {
            LOG.warn("Unable to use Nimbus L&F.", e);
        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new JMSMain().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton flagCounter;
    private JButton generateButton;
    private JLabel jLabel1;
    private JLabel jLabel12;
    private JLabel jLabel2;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JScrollPane jScrollPane2;
    private JCheckBox lockCheckbox;
    private JPanel minefieldContainer;
    private JLabel popLabel;
    private JSlider popSlider;
    private JButton timeCounter;
    private JLabel xLabel;
    private JSlider xSlider;
    private JLabel yLabel;
    private JSlider ySlider;
    // End of variables declaration//GEN-END:variables

    private static final GameState GAME_STATE = GameState.getInstance();
    private StopWatch stopWatch;

    private void additionalInit() {
        xLabel.setText(String.valueOf(xSlider.getValue()));
        yLabel.setText(String.valueOf(ySlider.getValue()));
        popLabel.setText(String.valueOf(popSlider.getValue()) + "%");
        setFlagCounterText(getMineCount());

        try {
            final Font font = SwingUtils.getFont("/fonts/Digital Dismay.ttf", Font.PLAIN, 32);
            timeCounter.setFont(font);
            flagCounter.setFont(font);
        } catch (FontFormatException | IOException e) {
            LOG.warn("Unable to initialize font for counters. Fallback to default", e);
        }

        stopWatch = new StopWatch(1000, new StopWatchListener(timeCounter));

        SwingUtils.centerOnScreen(this);
        GAME_STATE.addGameStateChangedListener(new GameStateChangedListener() {
            @Override
            public void gameStateChange(GameStateChangedEvent evt) {
                setFlagCounterText(evt.getFlagsRemaining());
            }

            @Override
            public void win(GameStateChangedEvent evt) {
                stopWatch.stop();
                LOG.info("WIN!!!");
                generateButton.setIcon(SwingUtils.getIcon("/icons/smiley_win.png", new Dimension(60, 60)));
            }

            @Override
            public void lose(GameStateChangedEvent evt) {
                stopWatch.stop();
                LOG.info("GAME OVER!!!");
                generateButton.setIcon(SwingUtils.getIcon("/icons/smiley_game_over.png", new Dimension(60, 60)));
            }

        });
        pack();
    }

    private void setFlagCounterText(int remainingFlagCount) {
        String value = String.format("%04d", remainingFlagCount);
        flagCounter.setText(value);
    }

    private void setLabelValue(JLabel label, String value) {
        label.setText(value);
    }

    private int getMineCount() {
        return (int) Math.round(getSizeX() * getSizeY() * (getPercent() / 100.0));
    }

    private int getPercent() {
        return popSlider.getValue();
    }

    private int getSizeX() {
        return xSlider.getValue();
    }

    private int getSizeY() {
        return ySlider.getValue();
    }

}
