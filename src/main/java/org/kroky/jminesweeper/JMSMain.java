/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.kroky.jminesweeper;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.WindowConstants;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.kroky.commons.utils.SwingUtils;
import org.kroky.jminesweeper.events.TileActionEvent;
import org.kroky.jminesweeper.events.TileActionListener;

/**
 *
 * @author Krokavec Peter
 */
public class JMSMain extends javax.swing.JFrame {

    private static final Logger LOG = LogManager.getFormatterLogger();

    /**
     * Creates new form MainFrame
     */
    public JMSMain() {
        initComponents();
        additionalInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        jScrollPane2 = new JScrollPane();
        minefieldContainer = new JPanel();
        jPanel1 = new JPanel();
        jLabel8 = new JLabel();
        xSlider = new JSlider();
        xLabel = new JLabel();
        jLabel9 = new JLabel();
        ySlider = new JSlider();
        yLabel = new JLabel();
        jPanel2 = new JPanel();
        lockCheckbox = new JCheckBox();
        jPanel3 = new JPanel();
        generateButton = new JButton();
        jPanel4 = new JPanel();
        flagCounterLabel = new JLabel();
        timeLabel = new JLabel();
        jButton2 = new JButton();
        jLabel12 = new JLabel();
        popSlider = new JSlider();
        popLabel = new JLabel();
        jButton1 = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setMaximumSize(new Dimension(640, 640));
        jScrollPane2.setMinimumSize(new Dimension(320, 320));
        jScrollPane2.setPreferredSize(new Dimension(640, 640));

        minefieldContainer.setLayout(new BoxLayout(minefieldContainer, BoxLayout.LINE_AXIS));
        jScrollPane2.setViewportView(minefieldContainer);

        jLabel8.setText("X:");

        xSlider.setMinimum(10);
        xSlider.setToolTipText("");
        xSlider.setValue(20);
        xSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                xSliderStateChanged(evt);
            }
        });

        xLabel.setText("20");
        xLabel.setText(String.valueOf(xSlider.getValue()));

        jLabel9.setText("Y:");

        ySlider.setMinimum(10);
        ySlider.setValue(20);
        ySlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                ySliderStateChanged(evt);
            }
        });

        yLabel.setText("20");
        yLabel.setText(String.valueOf(ySlider.getValue()));

        jPanel2.setLayout(new BoxLayout(jPanel2, BoxLayout.LINE_AXIS));

        lockCheckbox.setSelected(true);
        lockCheckbox.setText("Lock");
        jPanel2.add(lockCheckbox);

        jPanel3.setLayout(new BoxLayout(jPanel3, BoxLayout.LINE_AXIS));

        generateButton.setText("Generate!");
        generateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        jPanel3.add(generateButton);

        jPanel4.setLayout(new GridBagLayout());

        flagCounterLabel.setBackground(new Color(0, 0, 0));
        flagCounterLabel.setForeground(new Color(255, 0, 0));
        flagCounterLabel.setHorizontalAlignment(SwingConstants.CENTER);
        flagCounterLabel.setText("0000");
        flagCounterLabel.setText(String.format("%04d", getMineCount()));
        flagCounterLabel.setAlignmentY(0.0F);
        flagCounterLabel.setBorder(new LineBorder(new Color(0, 0, 0), 3, true));
        flagCounterLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        flagCounterLabel.setOpaque(true);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        jPanel4.add(flagCounterLabel, gridBagConstraints);

        timeLabel.setBackground(new Color(0, 0, 0));
        timeLabel.setForeground(new Color(255, 0, 0));
        timeLabel.setHorizontalAlignment(SwingConstants.CENTER);
        timeLabel.setText("00:00");
        timeLabel.setBorder(new LineBorder(new Color(0, 0, 0), 3, true));
        timeLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        timeLabel.setOpaque(true);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new Insets(5, 5, 5, 5);
        jPanel4.add(timeLabel, gridBagConstraints);

        jButton2.setBackground(new Color(0, 0, 0));
        jButton2.setForeground(new Color(255, 51, 51));
        jButton2.setText("00:00");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jButton2, gridBagConstraints);

        jLabel12.setText("Mine population:");

        popSlider.setMaximum(99);
        popSlider.setMinimum(1);
        popSlider.setValue(15);
        popSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                popSliderStateChanged(evt);
            }
        });

        popLabel.setText("20%");
        popLabel.setText(String.valueOf(popSlider.getValue()) + "%");

        jButton1.setBackground(new Color(0, 0, 0));
        jButton1.setForeground(new Color(255, 51, 51));
        jButton1.setText("0000");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xLabel, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(popSlider, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ySlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(yLabel, GroupLayout.PREFERRED_SIZE, 27, GroupLayout.PREFERRED_SIZE)
                            .addComponent(popLabel))))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, 173, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, 166, GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                                    .addComponent(xSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addComponent(xLabel))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                                    .addComponent(jLabel9)
                                    .addComponent(ySlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yLabel)))
                            .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel12)
                            .addComponent(popSlider, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                            .addComponent(popLabel)
                            .addComponent(jButton1)))
                    .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 288, Short.MAX_VALUE)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 353, GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        Component[] children = minefieldContainer.getComponents();
        if (children != null) {
            minefieldContainer.removeAll();
            minefieldContainer.repaint();
        }
        MinefieldPanel minefieldPanel = new MinefieldPanel(getSizeX(), ySlider.getValue(), getMineCount(), tileActionListener);
        minefieldContainer.add(Box.createHorizontalGlue());
        minefieldContainer.add(minefieldPanel);
        minefieldContainer.add(Box.createHorizontalGlue());
        pack();
    }//GEN-LAST:event_generateButtonActionPerformed

    private void popSliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_popSliderStateChanged
        final int percent = getPercent();
        String value = String.valueOf(percent) + "%";
        changeLabelValue(popLabel, value);

        value = String.format("%04d", getMineCount());
        changeLabelValue(flagCounterLabel, value);
    }//GEN-LAST:event_popSliderStateChanged

    private void ySliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_ySliderStateChanged
        String value = String.valueOf(getSizeY());
        changeLabelValue(yLabel, value);
        if (lockCheckbox.isSelected()) {
            xSlider.setValue(getSizeY());
            changeLabelValue(xLabel, value);
        }
        value = String.format("%04d", getMineCount());
        changeLabelValue(flagCounterLabel, value);
    }//GEN-LAST:event_ySliderStateChanged

    private void xSliderStateChanged(ChangeEvent evt) {//GEN-FIRST:event_xSliderStateChanged
        String value = String.valueOf(getSizeX());
        changeLabelValue(xLabel, value);
        if (lockCheckbox.isSelected()) {
            ySlider.setValue(getSizeX());
            changeLabelValue(yLabel, value);
        }
        value = String.format("%04d", getMineCount());
        changeLabelValue(flagCounterLabel, value);
    }//GEN-LAST:event_xSliderStateChanged

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JMSMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JMSMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JMSMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JMSMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JMSMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel flagCounterLabel;
    private JButton generateButton;
    private JButton jButton1;
    private JButton jButton2;
    private JLabel jLabel12;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JPanel jPanel4;
    private JScrollPane jScrollPane2;
    private JCheckBox lockCheckbox;
    private JPanel minefieldContainer;
    private JLabel popLabel;
    private JSlider popSlider;
    private JLabel timeLabel;
    private JLabel xLabel;
    private JSlider xSlider;
    private JLabel yLabel;
    private JSlider ySlider;
    // End of variables declaration//GEN-END:variables

    private TileActionListener tileActionListener;

    private void additionalInit() {
//        UIDefaults overrides = new UIDefaults();
//        overrides.put("Button[Disabled].backgroundPainter", new ButtonPainter(null, 7));
//        jButton1.putClientProperty("Nimbus.Overrides", overrides);
//        jButton1.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
//        SwingUtilities.updateComponentTreeUI(jButton1);
//
//        UIDefaults defaults = UIManager.getLookAndFeelDefaults();
//        defaults.put("Button[Disabled].backgroundPainter", new ButtonPainter(null, 7));
//        SwingUtilities.updateComponentTreeUI(jButton1);

        try {
            final Font font = SwingUtils.getFont("/fonts/Digital Dismay.otf", Font.PLAIN, 32);
            jButton1.setFont(font);
            flagCounterLabel.setFont(font);
            timeLabel.setFont(font);
        } catch (FontFormatException | IOException e) {
            LOG.warn("Unable to initialize font for counters. Fallback to default", e);
        }

        SwingUtils.centerOnScreen(this);
        tileActionListener = new TileActionListener() {
            @Override
            public void tileRevealed(TileActionEvent evt) {
                Tile tile = evt.getSource();
                LOG.debug("Reveal event coming from tile [%s,%s]", tile.getPosX(), tile.getPosY());
            }

            @Override
            public void tileFlagToggled(TileActionEvent evt) {
                Tile tile = evt.getSource();
                LOG.debug("Flag toggled event coming from tile [%s,%s]. Tile is now %s.", tile.getPosX(), tile.getPosY(), tile.isFlagged() ? "flagged" : "unflagged");
            }
        };
        pack();
    }

    private void changeLabelValue(JLabel label, String value) {
        label.setText(value);
    }

    private int getMineCount() {
        return (int) Math.round(getSizeX() * getSizeY() * (getPercent() / 100.0));
    }

    private int getPercent() {
        return popSlider.getValue();
    }

    private int getSizeX() {
        return xSlider.getValue();
    }

    private int getSizeY() {
        return ySlider.getValue();
    }

}
